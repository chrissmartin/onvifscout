name: Prepare Release

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type'
        required: true
        default: 'patch'
        type: choice
        options:
          - major
          - minor
          - patch
      prerelease:
        description: 'Pre-release'
        required: false
        type: boolean
        default: false
      dry_run:
        description: 'Dry run (no actual release)'
        required: false
        type: boolean
        default: false

jobs:
  prepare:
    name: Prepare ONVIFScout Release
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.8'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install python-semantic-release Jinja2 ruff==0.11.5 pytest
          pip install -e .

      - name: Configure Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: Run quality checks
        run: |
          ruff format --check .
          ruff check .
          pytest -xvs || echo "No tests found or tests failed, continuing anyway"

      - name: Run semantic-release for version and changelog
        if: ${{ !inputs.dry_run }}
        id: semantic_release
        uses: python-semantic-release/python-semantic-release@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          changelog: true
          build_command: ""  # Skip building, we'll do this in the publish workflow
          tag_format: "v{version}"
          force_level: ${{ inputs.release_type }}
          prerelease: ${{ inputs.prerelease }}

      - name: Store release version
        if: ${{ !inputs.dry_run }}
        run: |
          echo "${{ steps.semantic_release.outputs.version }}" > .version
          echo "RELEASE_VERSION=${{ steps.semantic_release.outputs.version }}" >> $GITHUB_ENV

      - name: Create GitHub Release
        if: ${{ !inputs.dry_run }}
        uses: ncipollo/release-action@v1
        with:
          tag: v${{ env.RELEASE_VERSION }}
          name: ONVIFScout v${{ env.RELEASE_VERSION }}
          body: ${{ steps.semantic_release.outputs.changelog }}
          draft: false
          prerelease: ${{ inputs.prerelease }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Show dry run results
        if: ${{ inputs.dry_run }}
        run: |
          echo "DRY RUN: No actual release was made"
          echo "Would have updated version and created a GitHub Release"
          echo "The existing 'Upload Python Package' workflow would then be triggered"

      - name: Notification
        if: ${{ success() && !inputs.dry_run }}
        run: |
          echo "::notice::Successfully prepared release v${{ env.RELEASE_VERSION }}"
          echo "::notice::The 'Upload Python Package' workflow should be triggered automatically"